#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Chmouel Boudjnah <chmouel@chmouel.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import argparse
import github as gh
import os
import subprocess

DEFAULT_BASE_URL = "https://api.github.com"
DEFAULT_TIMEOUT = 10
DEFAULT_PER_PAGE = 30


class GH(object):
    def __init__(self, token):
        self.client = gh.Requester.Requester(
            token, password=None, base_url=DEFAULT_BASE_URL,
            timeout=DEFAULT_TIMEOUT, client_id=None,
            client_secret=None, user_agent='PyGithub/Python',
            verify=True,
            per_page=DEFAULT_PER_PAGE, api_preview=False)
        self.headers = {'Accept':
                        'application/vnd.github.inertia-preview+json'}

    def get_projects_org(self, org):
        headers, data = self.client.requestJsonAndCheck(
            "GET",
            "/orgs/" + org + "/projects",
            headers=self.headers,
        )
        return(headers, data)

    def get_project_by_desc(self, org, desc):
        h, d = self.get_projects_org(org)
        for l in d:
            if l['body'] == desc:
                return l

    def get_columns_projectid(self, project_id):
        headers, data = self.client.requestJsonAndCheck(
            "GET",
            "/projects/" + str(project_id) + "/columns",
            headers=self.headers,
        )
        return(headers, data)

    def get_cards_board_project(self, project_id, name):
        h, d = self.get_columns_projectid(project_id)
        for l in d:
            if l['name'] == name:
                return l

    def list_card_column(self, column_id):
        headers, data = self.client.requestJsonAndCheck(
            "GET",
            "/projects/columns/" + str(column_id) + "/cards",
            headers=self.headers,
        )
        return(headers, data)

    def add_to_card_to_column(self, column_id, url):
        data = {
            'note': url
        }

        headers, data = self.client.requestJsonAndCheck(
            "POST",
            "/projects/columns/" + str(column_id) + "/cards",
            headers=self.headers,
            input=data
        )
        return (headers, data)


def main(args):
    if not all([args.organisation, args.board, args.column, args.issuepr]):
        print("Missing argument")
        parser.print_help()
        return

    if args.token:
        token = args.token
    else:
        token = subprocess.Popen(
            ["git", "config", "--get", "github.oauth-token"],
            stdout=subprocess.PIPE
        ).communicate()[0].strip().decode()

    g = GH(token)
    project = g.get_project_by_desc(args.organisation,
                                    args.board)
    column_id_of_backlog = g.get_cards_board_project(
        project['id'], args.column)['id']
    h, d = g.add_to_card_to_column(
        column_id_of_backlog,
        args.issuepr
    )
    from pprint import pprint as p
    p(d)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='GitHhub Project CLI.')
    parser.add_argument('-o', '--organisation', type=str,
                        help='Organisation where the board is located')
    parser.add_argument('-b', '--board', type=str,
                        help='Board by name')
    parser.add_argument('-c', '--column', type=str,
                        help='Column name')

    parser.add_argument('-i', '--issuepr', type=str,
                        help='Issue or PR to add')

    parser.add_argument("--token", type=str,
                        default=os.environ.get("GITHUB_TOKEN"),
                        help="GitHub Oauth Token. It will try the GITHUB_TOKEN"
                        " env or from `git config --get github.oauth-token`")

    args = parser.parse_args()

    main(args)
